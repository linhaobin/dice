{"version":3,"sources":["store/language.ts","store/account.ts","components/Navbar/index.tsx","components/Button/index.tsx","store/game.ts","components/Game/Slider/index.tsx","components/MediaQuery/index.tsx","components/Game/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LanguageLocale","store_language","languageList","locale","English","label","icon","messages","enMessages","China","zhCNMessage","_this","this","find","item","currentLanguageLocale","observable","computed","action","language","_this2","ScatterJS","plugins","ScatterEOS","network","blockchain","protocol","host","port","chainId","scatter","findAccount","identity","accounts","x","store_account","AccountStore","Object","classCallCheck","waitConnectPromises","waitLoginPromises","initializerDefineProperty","account_descriptor","account_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","rpc","JsonRpc","alert","api","eos","Api","expireInSeconds","_callee2","regenerator_default","a","wrap","_context2","prev","next","initPromise","abrupt","Promise","_ref2","asyncToGenerator","mark","_callee","resolve","_context","connect","account","getCurrencyBalance","window","stop","_x","apply","arguments","_callee3","p","_context3","connected","connecting","reject","push","sent","t0","length","shift","Error","_callee4","requiredFields","_context4","_this3","logined","logging","init","getIdentity","_callee5","_context5","_this4","balance","forgetIdentity","_callee6","_context6","_this5","login","_callee7","resp","balanceStr","_context7","_this6","get_currency_balance","name","split","toNumber","Login","props","logout","react_default","createElement","onClick","overlay","es_menu","Item","dropdown","trigger","concat","authority","type","Navbar","inject","languageStore","_languageStore","accountStore","_accountStore","observer","changeLanguage","_this$props","_ref","currentLanguage","menu","map","key","className","React","Component","Button","active","size","classnames","children","defaultProps","RollType","MAX_BET_AMOUNT","game","startRandom","stopRandom","luckyNum","Math","random","startRandomTimeoutId","setTimeout","clearTimeout","getMaxBetAmount","betAmountInputValue","value","toFixed","winChance","betAmount","payout","prediction","rollType","Small","toString","rolling","some","indexOf","lastIndexOf","_this7","_this8","max","_this9","es","min","onChange","presetMap","large","small","MediaQuery","getQuery","query","preset","react_responsive_default","assign","Game","gameStore","_gameStore","changePrediction","changeRollTypeToSmall","changeRollType","changeRollTypeToBig","Big","setHalfBetAmount","setDoubleBetAmount","setMinBetAmount","setMaxBetAmount","handleBetAmountChange","event","changeBetAmount","currentTarget","confirm","winReward","luckyNumUI","roll","balanceUI","index_es","id","src_components_MediaQuery","src_components_Button","Game_Slider","Info","values","matches","injectIntl","intl","items","formatMessage","i","addLocaleData","zh","en","App","Fragment","src_components_Navbar","src_components_Game","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66678f9c.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx'\n\nimport enMessages from '../languages/en.json'\nimport zhCNMessage from '../languages/zh-CN.json'\n\nenum LanguageLocale {\n  English = 'en',\n  China = 'zh-CN',\n}\n\ninterface Language {\n  locale: LanguageLocale\n  label: string\n  icon: string\n  messages?: any\n}\n\nclass LanguageStore {\n  @observable\n  currentLanguageLocale: LanguageLocale = LanguageLocale.English\n\n  languageList: Language[] = [\n    {\n      locale: LanguageLocale.English,\n      label: 'English',\n      icon: '',\n      messages: enMessages,\n    },\n    {\n      locale: LanguageLocale.China,\n      label: '简体中文',\n      icon: '',\n      messages: zhCNMessage,\n    },\n  ]\n\n  @computed\n  get currentLanguage() {\n    const language = this.languageList.find(item => item.locale === this.currentLanguageLocale) as Language\n\n    return language\n  }\n\n  @action\n  changeLanguage = (language: LanguageLocale) => {\n    this.currentLanguageLocale = language\n  }\n}\n\nexport default new LanguageStore()\n","import { observable, action } from 'mobx'\n\nimport ScatterJS from 'scatterjs-core'\nimport ScatterEOS from 'scatterjs-plugin-eosjs2'\nimport { Api, JsonRpc } from 'eosjs'\n\nimport toNumber from 'lodash/toNumber'\n\n// Don't forget to tell ScatterJS which plugins you are using.\nScatterJS.plugins(new ScatterEOS())\n\nconst network = {\n  blockchain: 'eos',\n  protocol: 'https',\n  host: 'nodes.get-scatter.com',\n  port: 443,\n  chainId: 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906',\n}\nconst endpoint = 'https://api.eosnewyork.io'\nconst contractAccount = 'hbin.dice'\n\nconst scatter = ScatterJS.scatter\n\nclass AccountStore {\n  api: Api\n  rpc: JsonRpc\n  initPromise?: Promise<void>\n\n  waitConnectPromises: Array<{ resolve: () => void; reject: () => void }> = []\n  waitLoginPromises: Array<{ resolve: () => void; reject: () => void }> = []\n\n  @observable\n  connecting: boolean = false\n  @observable\n  connected: boolean = false\n\n  @observable\n  logging: boolean = false\n  @observable\n  logined: boolean = false\n\n  @observable\n  account: any = null\n\n  @observable\n  balance: number | null = null\n\n  constructor() {\n    this.rpc = new JsonRpc(endpoint)\n\n    alert(scatter)\n\n    this.api = scatter.eos(network, Api, { rpc: this.rpc, expireInSeconds: 60 })\n    // this.api = new Api({ rpc: this.rpc, signatureProvider: scatter.eosHook(network) })\n  }\n\n  @action\n  init = async () => {\n    if (this.initPromise) return this.initPromise\n\n    this.initPromise = new Promise(async resolve => {\n      await this.connect()\n\n      this.account = findAccount()\n\n      if (this.account) {\n        this.getCurrencyBalance()\n      }\n\n      if (window) {\n        ;(window as any).ScatterJS = null\n      }\n      resolve()\n    })\n  }\n\n  @action\n  connect = async () => {\n    if (this.connected) return\n\n    if (this.connecting) {\n      return new Promise((resolve, reject) => {\n        this.waitConnectPromises.push({\n          resolve,\n          reject,\n        })\n      })\n    }\n\n    try {\n      this.connecting = true\n      this.connected = await ScatterJS.scatter.connect(contractAccount)\n    } catch (error) {\n      this.connected = false\n    }\n    this.connecting = false\n\n    while (this.waitConnectPromises.length > 0) {\n      const p = this.waitConnectPromises.shift()\n      if (this.connected) {\n        p!.resolve()\n      } else {\n        p!.reject()\n      }\n    }\n\n    if (!this.connected) {\n      throw new Error('connecte error')\n    }\n  }\n\n  @action\n  login = async () => {\n    if (this.logined) {\n      return\n    }\n    if (this.logging) {\n      return new Promise((resolve, reject) => {\n        this.waitLoginPromises.push({\n          resolve,\n          reject,\n        })\n      })\n    }\n    this.logging = true\n\n    try {\n      await this.init()\n      await this.connect()\n\n      if (!scatter.identity) {\n        const requiredFields = { accounts: [network] }\n        await scatter.getIdentity(requiredFields)\n      }\n\n      this.account = findAccount()\n      this.logined = true\n    } catch (e) {\n      this.logined = false\n    }\n    this.logging = false\n\n    while (this.waitLoginPromises.length > 0) {\n      const p = this.waitLoginPromises.shift()\n      if (this.logined) {\n        p!.resolve()\n      } else {\n        p!.reject()\n      }\n    }\n\n    this.getCurrencyBalance()\n  }\n\n  @action\n  logout = async () => {\n    this.logined = false\n    this.account = null\n    this.balance = null\n    scatter.forgetIdentity()\n  }\n\n  @action\n  getAccount = async () => {\n    await this.login()\n    return findAccount()\n  }\n\n  @action\n  getCurrencyBalance = async () => {\n    try {\n      if (!this.account) throw new Error('account not exist')\n      const resp: string[] = await this.rpc.get_currency_balance('eosio.token', this.account.name, 'EOS')\n      if (!resp || !resp.length) throw new Error('resp not exist')\n\n      const balanceStr = resp[0].split(' ')[0]\n      this.balance = toNumber(balanceStr)\n      return this.balance\n    } catch (error) {\n      throw error\n    }\n  }\n\n  // @action\n  // checkLogined = async () => {\n  //   await this.login()\n  // }\n}\nfunction findAccount() {\n  if (!scatter.identity) return null\n  return scatter.identity.accounts.find((x: { blockchain: string }) => x.blockchain === 'eos')\n}\n\nexport default new AccountStore()\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { Menu, Dropdown, Icon } from 'antd'\n\n// styles\nimport './index.scss'\n\n// store\nimport _languageStore from '../../store/language'\nimport _accountStore from '../../store/account'\n\nexport interface InjectProps {\n  languageStore?: typeof _languageStore\n  accountStore?: typeof _accountStore\n}\nexport interface OwnProps {}\nexport type Props = InjectProps & OwnProps\n\ninterface State {}\n\n@inject(() => ({\n  languageStore: _languageStore,\n  accountStore: _accountStore,\n}))\n@observer\nclass Navbar extends React.Component<Props, State> {\n  // ---------------- 私有属性 ----------------\n\n  // ---------------- 生命周期 ----------------\n\n  // ---------------- 计算属性 ----------------\n  changeLanguage = _languageStore.changeLanguage\n\n  render() {\n    const { languageStore, accountStore } = this.props\n    const { languageList, currentLanguage } = languageStore!\n    const { account, login, logout } = accountStore!\n\n    const menu = (\n      <Menu>\n        {languageList.map(language => {\n          return (\n            <Menu.Item key={language.locale} onClick={() => this.changeLanguage(language.locale)}>\n              {language.label}\n            </Menu.Item>\n          )\n        })}\n      </Menu>\n    )\n\n    return (\n      <nav className=\"app-navbar\">\n        <div className=\"app-navbar__content\">\n          <div className=\"app-navbar__logo\" />\n\n          <div className=\"app-navbar__right\">\n            <div className=\"app-navbar__login\">\n              <Login account={account} login={login} logout={logout} />\n            </div>\n            <div className=\"app-navbar__language\">\n              <Dropdown overlay={menu} trigger={['click']}>\n                <div>\n                  {currentLanguage.label} <Icon type=\"down\" />\n                </div>\n              </Dropdown>\n            </div>\n          </div>\n        </div>\n      </nav>\n    )\n  }\n}\n\nfunction Login(props: { account: any; login: () => void; logout: () => void }) {\n  const { account, login, logout } = props\n  if (!account) {\n    return <div onClick={login}>Login</div>\n  }\n\n  const overlay = (\n    <Menu>\n      <Menu.Item onClick={logout}>Logout</Menu.Item>\n    </Menu>\n  )\n\n  return (\n    <Dropdown overlay={overlay} trigger={['click']}>\n      <div>\n        {`${account.name}@${account.authority}`} <Icon type=\"down\" />\n      </div>\n    </Dropdown>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\nimport classnames from 'classnames'\n\n// styles\nimport './index.scss'\n\nexport interface DataProps {\n  active?: boolean\n  size?: 'large' | 'small' | 'default'\n}\nexport interface EventProps {\n  onClick: () => void\n}\nexport type Props = DataProps & EventProps\n\ninterface State {}\n\nclass Button extends React.Component<Props, State> {\n  static defaultProps = {\n    size: 'default',\n  }\n  // ---------------- 私有属性 ----------------\n\n  // ---------------- 生命周期 ----------------\n  componentDidMount() {\n    //\n  }\n\n  // ---------------- 计算属性 ----------------\n  render() {\n    const { active, size, onClick } = this.props\n    return (\n      <button\n        className={classnames('app-button', active && 'app-button__active', `app-button__size-${size}`)}\n        onClick={onClick}\n      >\n        {this.props.children}\n      </button>\n    )\n  }\n}\n\nexport default Button\n","import { observable, computed, action } from 'mobx'\nimport toNumber from 'lodash/toNumber'\n\n// store\nimport accountStore from './account'\n\nconst FEE = 0.02\nconst MIN_PREDICTION = 2\nconst MAX_PREDICTION = 97\nconst MIN_BET_AMOUNT = 0.1\nconst MAX_BET_AMOUNT = (9 * 10) ^ 10\n\nexport enum RollType {\n  Small,\n  Big,\n}\n\nclass App {\n  startRandomTimeoutId: any\n  /**\n   * 预测值\n   */\n  @observable\n  prediction = 49\n\n  @observable\n  rollType = RollType.Small\n\n  @observable\n  betAmountInputValue: string = (1).toFixed(4)\n\n  @observable\n  luckyNum: number | null = null\n\n  @observable\n  rolling: boolean = false\n\n  @computed\n  get betAmount() {\n    return toNumber(this.betAmountInputValue)\n  }\n  set betAmount(value: number) {\n    this.betAmountInputValue = value.toFixed(4)\n  }\n\n  @computed\n  get payout() {\n    return (1 - FEE) / this.winChance\n  }\n\n  @computed\n  get winReward() {\n    return this.betAmount * this.payout\n  }\n\n  @computed\n  get winChance() {\n    const p = this.prediction / 100\n    return this.rollType === RollType.Small ? p : 0.99 - p\n  }\n\n  @computed\n  get luckyNumUI() {\n    if (this.luckyNum === null) {\n      return '--'\n    }\n\n    if (this.luckyNum < 10) {\n      return `0${this.luckyNum}`\n    }\n\n    return this.luckyNum.toString()\n  }\n\n  @action\n  changePrediction = (value: number) => {\n    if (this.rolling) return\n    if (value < MIN_PREDICTION || value > MAX_PREDICTION) return\n    this.prediction = value\n  }\n\n  @action\n  changeRollType = (rollType: RollType) => {\n    if (this.rolling) return\n    this.rollType = rollType\n  }\n\n  @action\n  changeBetAmount = (value: string) => {\n    if (this.rolling) return\n    if (value.split('').some(item => '0123456789.'.indexOf(item) < 0)) {\n      return\n    }\n    if (value.indexOf('.') !== value.lastIndexOf('.')) return\n\n    const lastIndex = value.length - value.lastIndexOf('.') - 1\n    if (lastIndex > 4) return\n\n    this.betAmountInputValue = value\n  }\n\n  @action\n  setMinBetAmount = () => {\n    if (this.rolling) return\n    this.betAmount = MIN_BET_AMOUNT\n  }\n\n  @action\n  setMaxBetAmount = () => {\n    if (this.rolling) return\n    this.betAmount = this.getMaxBetAmount()\n  }\n\n  @action\n  setHalfBetAmount = () => {\n    if (this.rolling) return\n    let value = this.betAmount / 2\n    if (value < MIN_BET_AMOUNT) {\n      value = MIN_BET_AMOUNT\n    }\n    this.betAmount = value\n  }\n\n  @action\n  setDoubleBetAmount = () => {\n    if (this.rolling) return\n    // 不超过最大值为当前余额\n    const value = this.betAmount * 2\n    const max = this.getMaxBetAmount()\n\n    this.betAmount = value > max ? max : value\n  }\n\n  @action\n  roll = async () => {\n    if (this.rolling) return\n    this.rolling = true\n    await accountStore.login()\n    const balance = await accountStore.getCurrencyBalance()\n    if (this.betAmount > balance) {\n      throw new Error('betAmount > balance')\n    }\n    this.startRandom()\n\n    const luckyNum = await new Promise<number>(resolve => setTimeout(() => resolve(~~(Math.random() * 99)), 2000))\n    await accountStore.getCurrencyBalance()\n    this.luckyNum = luckyNum\n\n    this.stopRandom()\n    this.rolling = false\n  }\n\n  startRandom = () => {\n    this.stopRandom()\n    this.luckyNum = ~~(Math.random() * 99)\n    this.startRandomTimeoutId = setTimeout(this.startRandom, 66)\n  }\n\n  stopRandom = () => {\n    clearTimeout(this.startRandomTimeoutId)\n  }\n\n  getMaxBetAmount = () => {\n    // 最大值为当前余额\n    if (accountStore.balance === null) {\n      return MAX_BET_AMOUNT\n    }\n    return accountStore.balance\n  }\n}\n\nexport default new App()\n","import React from 'react'\nimport classnames from 'classnames'\nimport RcSlider from 'rc-slider'\nimport 'rc-slider/assets/index.css'\n\n// styles\nimport './index.scss'\n\n// store\nimport { RollType } from '../../../store/game'\n\nexport interface DataProps {\n  value: number\n  rollType: RollType\n}\nexport interface EventProps {\n  onChange: (value: number) => void\n}\nexport type Props = DataProps & EventProps\n\ninterface State {}\n\nclass Navbar extends React.Component<Props, State> {\n  // ---------------- 私有属性 ----------------\n\n  // ---------------- 生命周期 ----------------\n\n  // ---------------- 计算属性 ----------------\n\n  render() {\n    const { value, rollType } = this.props\n    return (\n      <div\n        className={classnames('game-slider', rollType === RollType.Small ? 'game-slider__less' : 'game-slider__greater')}\n      >\n        <div className=\"game-slider__label-wrap\">\n          <span>0</span>\n          <span>99</span>\n        </div>\n        <RcSlider min={0 - 3} max={99 + 3} value={value} onChange={this.props.onChange} />\n      </div>\n    )\n  }\n}\n\nexport default Navbar\n","import React from 'react'\nimport Responsive, { MediaQueryProps } from 'react-responsive'\n\n// styles\nimport './index.scss'\n\nexport type Props = MediaQueryProps & { preset?: 'large' | 'small' }\n\ninterface State {}\n\nconst Width = 767\nconst presetMap = {\n  large: `only screen and (min-width: ${Width}px)`,\n  small: `only screen and (max-width: ${Width}px)`,\n}\n\nclass MediaQuery extends React.Component<Props, State> {\n  // ---------------- 私有属性 ----------------\n\n  // ---------------- 生命周期 ----------------\n\n  // ---------------- 计算属性 ----------------\n\n  getQuery = () => {\n    if (this.props.query) return this.props.query\n    if (this.props.preset) {\n      return presetMap[this.props.preset]\n    }\n  }\n\n  render() {\n    return (\n      <Responsive {...this.props} query={this.getQuery()}>\n        {this.props.children}\n      </Responsive>\n    )\n  }\n}\n\nexport default MediaQuery\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\n// component\nimport { FormattedMessage, injectIntl, InjectedIntlProps } from 'react-intl'\nimport Button from '../Button'\nimport Slider from './Slider'\nimport MediaQuery from '../MediaQuery'\n\n// styles\nimport './index.scss'\n\n// store\nimport _gameStore, { RollType } from '../../store/game'\nimport _accountStore from '../../store/account'\n\nexport interface InjectProps {\n  gameStore?: typeof _gameStore\n  accountStore?: typeof _accountStore\n}\nexport interface OwnProps {}\nexport type Props = InjectProps & OwnProps\n\ninterface State {}\n@inject(() => ({\n  gameStore: _gameStore,\n  accountStore: _accountStore,\n}))\n@observer\nclass Game extends React.Component<Props, State> {\n  // ---------------- 私有属性 ----------------\n\n  // ---------------- 生命周期 ----------------\n\n  // ---------------- 计算属性 ----------------\n  // ------------------ 方法 -----------------\n  changePrediction = _gameStore.changePrediction\n\n  changeRollTypeToSmall = () => _gameStore.changeRollType(RollType.Small)\n  changeRollTypeToBig = () => _gameStore.changeRollType(RollType.Big)\n  setHalfBetAmount = () => _gameStore.setHalfBetAmount()\n  setDoubleBetAmount = () => _gameStore.setDoubleBetAmount()\n  setMinBetAmount = () => _gameStore.setMinBetAmount()\n  setMaxBetAmount = () => _gameStore.setMaxBetAmount()\n\n  handleBetAmountChange: React.FormEventHandler<HTMLInputElement> = event => {\n    _gameStore.changeBetAmount(event.currentTarget.value)\n  }\n  confirm = () => {}\n\n  render() {\n    const { gameStore, accountStore } = this.props\n    const { payout, prediction, winChance, winReward, rollType, betAmountInputValue, luckyNumUI, roll } = gameStore!\n\n    const { balance } = accountStore!\n\n    const balanceUI = balance !== null ? balance.toFixed(4) : '--'\n\n    return (\n      <div className=\"game\">\n        {/* 上面 */}\n        <div className=\"game__top\">\n          {/* 数字 */}\n          <div className=\"game__number-wrap\">\n            <div className=\"game__prediction\">\n              <div className=\"game__prediction-value\">{prediction}</div>\n              <div className=\"game__prediction-label\">\n                <FormattedMessage id=\"game.prediction\" />\n              </div>\n            </div>\n            <div className=\"game__result\">\n              <div className=\"game__result-value\">{luckyNumUI}</div>\n              <div className=\"game__result-label\">\n                <FormattedMessage id=\"game.luckyNumber\" />\n              </div>\n            </div>\n          </div>\n\n          {/* sm roll type */}\n          <MediaQuery preset=\"small\">\n            <div className=\"game__sm__roll-type\">\n              <Button size=\"small\" active={rollType === RollType.Small} onClick={this.changeRollTypeToSmall}>\n                <FormattedMessage id=\"game.rollUnder\" />\n              </Button>\n\n              <Button size=\"small\" active={rollType === RollType.Big} onClick={this.changeRollTypeToBig}>\n                <FormattedMessage id=\"game.rollOver\" />\n              </Button>\n            </div>\n          </MediaQuery>\n\n          {/* 滑轮 */}\n          <div className=\"game__slider-wrap\">\n            <MediaQuery preset=\"large\">\n              <Button active={rollType === RollType.Small} onClick={this.changeRollTypeToSmall}>\n                <FormattedMessage id=\"game.rollUnder\" />\n              </Button>\n            </MediaQuery>\n            <div className=\"game__slider-wrap-center\">\n              <Slider value={prediction} onChange={this.changePrediction} rollType={rollType} />\n            </div>\n            <MediaQuery preset=\"large\">\n              <Button active={rollType === RollType.Big} onClick={this.changeRollTypeToBig}>\n                <FormattedMessage id=\"game.rollOver\" />\n              </Button>\n            </MediaQuery>\n          </div>\n        </div>\n\n        {/* 信息 */}\n        <Info payout={payout} winReward={winReward} winChance={winChance} />\n\n        <div className=\"game__bottom\">\n          <div className=\"game__chip\">\n            <div className=\"game__chip-title\">\n              <FormattedMessage id=\"game.chip\" />\n            </div>\n            <div className=\"game__chip-select\" />\n            <div className=\"game__chip-desc\">EOS</div>\n          </div>\n          <div className=\"game__bet-amount\">\n            <div className=\"game__bet-amount-title\">\n              <FormattedMessage id=\"game.betAmount\" />\n            </div>\n            <div className=\"game__bet-amount-content\">\n              <input\n                className=\"game__bet-amount-content-input\"\n                type=\"text\"\n                value={betAmountInputValue}\n                onChange={this.handleBetAmountChange}\n              />\n              <div className=\"game__bet-amount-content-btns\">\n                <div onClick={this.setDoubleBetAmount}>2x</div>\n                <div onClick={this.setHalfBetAmount}>1/2</div>\n                <div onClick={this.setMinBetAmount}>Min</div>\n                <div onClick={this.setMaxBetAmount}>Max</div>\n              </div>\n            </div>\n            <div className=\"game__bet-amount-desc\">\n              <FormattedMessage id=\"game.balance\" values={{ balance: balanceUI }} />\n            </div>\n          </div>\n          <div className=\"game__confirm\">\n            <MediaQuery preset=\"small\">\n              {matches => {\n                return (\n                  <Button active size={matches ? 'default' : 'large'} onClick={roll}>\n                    {rollType === RollType.Small ? (\n                      <FormattedMessage id=\"game.rollUnder\" />\n                    ) : (\n                      <FormattedMessage id=\"game.rollOver\" />\n                    )}{' '}\n                    {prediction}\n                  </Button>\n                )\n              }}\n            </MediaQuery>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Info = injectIntl((props: { payout: number; winReward: number; winChance: number } & InjectedIntlProps) => {\n  const { intl } = props\n  const items = [\n    {\n      label: intl.formatMessage({ id: 'game.payout' }),\n      value: `${props.payout.toFixed(2)}x`,\n    },\n    {\n      label: intl.formatMessage({ id: 'game.profitOnWin' }),\n      value: `${props.winReward.toFixed(2)} EOS`,\n    },\n    {\n      label: intl.formatMessage({ id: 'game.winChance' }),\n      value: `${(props.winChance * 100).toFixed(2)}%`,\n    },\n  ]\n  return (\n    <div className=\"game__info\">\n      {items.map((item, i) => {\n        return (\n          <div key={i} className=\"game__info-item\">\n            <div>{item.label}</div>\n            <div>{item.value}</div>\n          </div>\n        )\n      })}\n    </div>\n  )\n})\n\nexport default Game\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { IntlProvider, addLocaleData } from 'react-intl'\nimport en from 'react-intl/locale-data/en'\nimport zh from 'react-intl/locale-data/zh'\n\n// components\nimport Navbar from './components/Navbar'\nimport Game from './components/Game'\n\n// styles\nimport './App.scss'\n\n// store\nimport _accountStore from './store/account'\nimport _languageStore from './store/language'\n\naddLocaleData(zh)\naddLocaleData(en)\n_accountStore.init()\n\ninterface Props {\n  languageStore?: typeof _languageStore\n}\n\n@inject(() => ({\n  languageStore: _languageStore,\n}))\n@observer\nclass App extends React.Component<Props> {\n  render() {\n    const { languageStore } = this.props\n    const { currentLanguage } = languageStore!\n    return (\n      <IntlProvider key={currentLanguage.locale} locale={currentLanguage.locale} messages={currentLanguage.messages}>\n        <>\n          <Navbar />\n\n          <Game />\n        </>\n      </IntlProvider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import '@babel/polyfill'\n// import 'core-js/es6/map'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}